name: CPJ Lifecycle

on:
  workflow_dispatch:
    inputs:

      labName:
        description: The name of the lab (defaults to mva)
        required: false

      labNumberParticipants:
        description: The number of participants in the lab (defaults to 20)
        required: false

      nodeCount:
        description: The number of nodes to create (defaults to 3)
        required: false

      choice:
        required: true
        type: choice
        description: The stages to run (defaults to provision)
        options:
          - "provision"
          - "destroy"

      destroy:
        description: Destroy the lab? (defaults to false)
        type: boolean
        required: false

env:
  TF_VAR_labname: ${{ github.event.inputs.labName || 'mva' }}

  hugoVersion: '0.76.1'
  ZIPPASS: 'cpjsecretpassword'

jobs:
  terraform:

    runs-on: ubuntu-latest

    env:
      #TF_VAR_labname: ${{ github.event.inputs.labName || 'mva' }}
      TF_VAR_labNumberParticipants: ${{ github.event.inputs.labNumberParticipants || '20' }}
      TF_VAR_nodecount: ${{ github.event.inputs.nodeCount || '3'}}

      TF_VAR_vmSizeAks: 'Standard_E8_v3'
      TF_VAR_rsgcommon: 'cloudacademy-common'
      TF_VAR_location: 'westeurope'
      TF_VAR_sshUserPw: 'CPJSchulung2022'
      
      TF_VAR_ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      TF_VAR_ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      TF_VAR_ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      TF_VAR_ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_STATE_BLOBACCESSKEY: ${{ secrets.STATE_BLOBACCESSKEY }}
      TF_VAR_STATE_SAACCOUNTNAME: 'cloudacademyiacstate'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Terraform plan
        if: "${{ github.event.inputs.choice == 'provision' && github.event.inputs.destroy == 'false' }}"
        env:
          TF_ACTION: 'plan'
        run: |
          #!/bin/bash
          set -xe

          docker run \
            -v "$(pwd)"/:/workspace \
            -w /workspace \
            hashicorp/terraform:latest \
                init \
                    -backend-config="key=${{ env.TF_VAR_labname }}-components.tfstate" \
                    -backend-config="access_key=${{ env.TF_VAR_STATE_BLOBACCESSKEY }}" \
                    -backend-config=storage_account_name="${{ env.TF_VAR_STATE_SAACCOUNTNAME }}"
          
          docker run \
            -e "ARM_SUBSCRIPTION_ID=${{ env.TF_VAR_ARM_SUBSCRIPTION_ID }}" \
            -e "ARM_CLIENT_ID=${{ env.TF_VAR_ARM_CLIENT_ID }}" \
            -e "ARM_CLIENT_SECRET=${{ env.TF_VAR_ARM_CLIENT_SECRET }}" \
            -e "ARM_TENANT_ID=${{ env.TF_VAR_ARM_TENANT_ID }}" \
            -e "STATE_BLOBACCESSKEY=${{ env.TF_VAR_STATE_BLOBACCESSKEY }}" \
            -e "TF_VAR_labname=${{ env.TF_VAR_labname }}" \
            -e "TF_VAR_location=${{ env.TF_VAR_location }}" \
            -e "TF_VAR_labNumberParticipants=${{ env.TF_VAR_labNumberParticipants }}" \
            -e "TF_VAR_vmSizeAks=${{ env.TF_VAR_vmSizeAks }}" \
            -e "TF_VAR_nodecount=${{ env.TF_VAR_nodecount }}" \
            -e "TF_VAR_clientid=${{ env.TF_VAR_ARM_CLIENT_ID }}" \
            -e "TF_VAR_clientsecret=${{ env.TF_VAR_ARM_CLIENT_SECRET }}" \
            -e "TF_VAR_rsgcommon=${{ env.TF_VAR_rsgcommon }}" \
            -e "TF_VAR_sshUserPw=${{ env.TF_VAR_sshUserPw }}" \
            -v "$(pwd)"/:/workspace \
            -w /workspace \
            hashicorp/terraform:latest \
              ${{ env.TF_ACTION }} \
        working-directory: 'infrastructureAsCode'

      - name: Terraform apply
        if: "${{ github.event.inputs.choice == 'provision' && github.event.inputs.destroy == 'false' }}"
        env:
          TF_ACTION: 'apply'
          TF_OPTIONS: '--auto-approve'
        run: |
          #!/bin/bash
          set -xe

          docker run \
            -v "$(pwd)"/:/workspace \
            -w /workspace \
            hashicorp/terraform:latest \
                init \
                    -backend-config="key=${{ env.TF_VAR_labname }}-components.tfstate" \
                    -backend-config="access_key=${{ env.TF_VAR_STATE_BLOBACCESSKEY }}" \
                    -backend-config=storage_account_name="${{ env.TF_VAR_STATE_SAACCOUNTNAME }}"
          
          docker run \
            -e "ARM_SUBSCRIPTION_ID=${{ env.TF_VAR_ARM_SUBSCRIPTION_ID }}" \
            -e "ARM_CLIENT_ID=${{ env.TF_VAR_ARM_CLIENT_ID }}" \
            -e "ARM_CLIENT_SECRET=${{ env.TF_VAR_ARM_CLIENT_SECRET }}" \
            -e "ARM_TENANT_ID=${{ env.TF_VAR_ARM_TENANT_ID }}" \
            -e "STATE_BLOBACCESSKEY=${{ env.TF_VAR_STATE_BLOBACCESSKEY }}" \
            -e "TF_VAR_labname=${{ env.TF_VAR_labname }}" \
            -e "TF_VAR_location=${{ env.TF_VAR_location }}" \
            -e "TF_VAR_labNumberParticipants=${{ env.TF_VAR_labNumberParticipants }}" \
            -e "TF_VAR_vmSizeAks=${{ env.TF_VAR_vmSizeAks }}" \
            -e "TF_VAR_nodecount=${{ env.TF_VAR_nodecount }}" \
            -e "TF_VAR_clientid=${{ env.TF_VAR_ARM_CLIENT_ID }}" \
            -e "TF_VAR_clientsecret=${{ env.TF_VAR_ARM_CLIENT_SECRET }}" \
            -e "TF_VAR_rsgcommon=${{ env.TF_VAR_rsgcommon }}" \
            -e "TF_VAR_sshUserPw=${{ env.TF_VAR_sshUserPw }}" \
            -v "$(pwd)"/:/workspace \
            -w /workspace \
            hashicorp/terraform:latest \
              ${{ env.TF_ACTION }} \
              ${{ env.TF_OPTIONS }}
        working-directory: 'infrastructureAsCode'

      - name: Terraform destroy
        if: "${{ github.event.inputs.choice == 'destroy' && github.event.inputs.destroy == 'true' }}"
        env:
          TF_ACTION: 'destroy'
          TF_OPTIONS: '--auto-approve'
        run: |
          #!/bin/bash
          set -xe

          docker run \
            -v "$(pwd)"/:/workspace \
            -w /workspace \
            hashicorp/terraform:latest \
                init \
                    -backend-config="key=${{ env.TF_VAR_labname }}-components.tfstate" \
                    -backend-config="access_key=${{ env.TF_VAR_STATE_BLOBACCESSKEY }}" \
                    -backend-config=storage_account_name="${{ env.TF_VAR_STATE_SAACCOUNTNAME }}"
          
          docker run \
            -e "ARM_SUBSCRIPTION_ID=${{ env.TF_VAR_ARM_SUBSCRIPTION_ID }}" \
            -e "ARM_CLIENT_ID=${{ env.TF_VAR_ARM_CLIENT_ID }}" \
            -e "ARM_CLIENT_SECRET=${{ env.TF_VAR_ARM_CLIENT_SECRET }}" \
            -e "ARM_TENANT_ID=${{ env.TF_VAR_ARM_TENANT_ID }}" \
            -e "STATE_BLOBACCESSKEY=${{ env.TF_VAR_STATE_BLOBACCESSKEY }}" \
            -e "TF_VAR_labname=${{ env.TF_VAR_labname }}" \
            -e "TF_VAR_location=${{ env.TF_VAR_location }}" \
            -e "TF_VAR_labNumberParticipants=${{ env.TF_VAR_labNumberParticipants }}" \
            -e "TF_VAR_vmSizeAks=${{ env.TF_VAR_vmSizeAks }}" \
            -e "TF_VAR_nodecount=${{ env.TF_VAR_nodecount }}" \
            -e "TF_VAR_clientid=${{ env.TF_VAR_ARM_CLIENT_ID }}" \
            -e "TF_VAR_clientsecret=${{ env.TF_VAR_ARM_CLIENT_SECRET }}" \
            -e "TF_VAR_rsgcommon=${{ env.TF_VAR_rsgcommon }}" \
            -e "TF_VAR_sshUserPw=${{ env.TF_VAR_sshUserPw }}" \
            -v "$(pwd)"/:/workspace \
            -w /workspace \
            hashicorp/terraform:latest \
              ${{ env.TF_ACTION }} \
              ${{ env.TF_OPTIONS }}
        working-directory: 'infrastructureAsCode'

  hosting:

    needs: terraform

    runs-on: ubuntu-latest

    if: "${{ github.event.inputs.choice == 'provision' && github.event.inputs.destroy == 'false' }}"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Hugo
        run: |
          wget -c 'https://github.com/gohugoio/hugo/releases/download/v${{ env.hugoVersion }}/hugo_extended_${{ env.hugoVersion }}_Linux-64bit.deb'
      - name: Install Hugo
        run: |
          sudo dpkg -i hugo_extended_${{ env.hugoVersion }}_Linux-64bit.deb

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Checkout excercises
        uses: actions/checkout@master
        with:
          repository: NovatecConsulting/technologyconsulting-cpj-excercises
          ref: 'main'
          token: ${{ secrets.GH_PAT }}
          path: './hugo'

      - name: Hugo

        run: |
          #!/bin/bash
          set -xe

          az extension add --name storage-preview
          az storage blob service-properties update \
            --account-name "${{ env.TF_VAR_labname }}materials" \
            --static-website \
            --404-document 404.html \
            --index-document index.html

          cd ./hugo
        
          pwd
          echo 'add Pod-Service data into hugofiles'

          echo "<h2>IP Addressen</h2>" >> content/_index.md

          AKSNAME="${{ env.TF_VAR_labname }}aks"

          az aks get-credentials -g ${{ env.TF_VAR_labname }} -n $AKSNAME

          echo "Get Participant Pods Service IPs"

          kubectl get svc

          printf "<h3>Webssh-Server Loadbalancer IP </h3>" >>  content/_index.md

          printf "<p>" >>  content/_index.md
          kubectl describe svc webssh-server | grep Ingress >>  content/_index.md
          printf "</p>" >>  content/_index.md
          printf "<br/>" >>  content/_index.md

          printf "<h3>Pod-Service Loadbalancer IPs </h3>" >>  content/_index.md

          for ((i = i; i<$TF_VAR_labNumberParticipants; i++)); do
            printf "<h5>Pod $i Service ClusterIP: </h5>" >>  content/_index.md

            printf "<p>" >>  content/_index.md
            kubectl describe svc "participant-pod-$i-service" | grep Ingress >>  content/_index.md
            printf "</p>" >>  content/_index.md

            printf "<p>" >>  content/_index.md
            kubectl describe svc "participant-pod-$i-service" | grep IPs >>  content/_index.md
            printf "</p>" >>  content/_index.md
            printf "<br/>" >>  content/_index.md
          done


          echo 'creating hugo static page'
          mkdir themes && cd themes && git clone https://github.com/matcornic/hugo-theme-learn.git && cd ..
          # TC-380: update clipboards.js to avoid jumping in page on copy-to-clipboard when focus was lost
          curl -sSL https://raw.githubusercontent.com/zenorocha/clipboard.js/master/dist/clipboard.min.js > themes/hugo-theme-learn/static/js/clipboard.min.js

          cp config.toml localZIPgenConfig.toml

          sed -i 's/relativeURLs = "false"/relativeURLs = "true"/g' localZIPgenConfig.toml
          sed -i 's/uglyURLs = "false"/uglyURLs = "true"/g' localZIPgenConfig.toml
          sed -i 's/publishDir = "public"/publishDir = "CPJ"/g' localZIPgenConfig.toml
          sed -i 's/baseURL = "\/"/baseURL = ""/g' localZIPgenConfig.toml
          sed -i 's/HUGO\_BASEURL = "https\:\/\/cloudacademyhugo.z6.web.core.windows.net\/"/HUGO_BASEURL = ""/g' localZIPgenConfig.toml

          cat localZIPgenConfig.toml
          echo ""
          echo "create zip folder"

          sudo hugo --config localZIPgenConfig.toml
          ls CPJ/

          echo "zip pass var is:"
          echo ${{ env.ZIPPASS }}
          zip -rP ${{ env.ZIPPASS }} cloud_platform_journey-materials.zip CPJ/
          cp cloud_platform_journey-materials.zip content/_index.files/
          sudo hugo --log -v
          ls public/
          az storage blob upload-batch -d \$web -s ./public --account-name "${{ env.TF_VAR_labname }}materials"
          # --source . --destination "CPJ"